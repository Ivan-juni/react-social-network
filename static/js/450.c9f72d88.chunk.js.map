{"version":3,"file":"static/js/450.c9f72d88.chunk.js","mappings":"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","sources":["webpack://react-app-2.0/./src/components/Chat/ChatPage.module.css?bcb2","components/Chat/AddMessageForm/AddMessageForm.tsx","components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ChatPage_wrapper__tdBXV\",\"caption\":\"ChatPage_caption__2Qo6P\",\"messages__wrapper\":\"ChatPage_messages__wrapper__d72WY\",\"button__send\":\"ChatPage_button__send__GQra8\",\"avatar\":\"ChatPage_avatar__BkmkQ\",\"hline\":\"ChatPage_hline__MnDZz\",\"userHead\":\"ChatPage_userHead__EfQEx\",\"user\":\"ChatPage_user__s3eb1\",\"userInfo\":\"ChatPage_userInfo__qjopU\",\"message\":\"ChatPage_message__YSTbF\",\"user__thumb\":\"ChatPage_user__thumb__o42ne\",\"userName\":\"ChatPage_userName__B2rlr\",\"messages__new\":\"ChatPage_messages__new__u1eR2\"};","import React from \"react\";\nimport styles from \"../ChatPage.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sendMessage } from \"../../../Redux/chat-reducer.ts\";\nimport { RootState } from \"../../../types/types\";\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\n\n\nconst AddMessageForm: React.FC = () => {\n  const dispatch: any = useDispatch();\n  const status = useSelector((state: RootState) => state.chat.status)\n\n  const onSubmit = (values: {message: string}, { resetForm }) => {\n    if(!values.message) {\n      return\n    }\n    dispatch(sendMessage(values.message));\n    resetForm({});\n  };\n\n  const validationSchema = Yup.object({\n    message: Yup.string().min(1, \"Must be longer than 0 characters\"),\n  });\n\n  return (\n    <Formik\n      initialValues={{ message: \"\" }}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      <Form>\n        <div className={styles.messages__new}>\n          <Field\n            as=\"textarea\"\n            type=\"text\"\n            name=\"message\"\n            placeholder=\"Type your message here\"\n            className={styles.field}\n          ></Field>\n          <button className={styles.button__send} type={\"submit\"} disabled={status !== 'ready'}>\n            Send\n          </button>\n          <ErrorMessage name='message'/>\n        </div>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default AddMessageForm;","import React, { useRef, useState } from 'react';\nimport styles from \"./ChatPage.module.css\";\nimport avatar from \"../../images/ava-icon.jpeg\";\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { startMessagesListening, stopMessagesListening } from '../../Redux/chat-reducer.ts';\nimport { AppDispatch } from '../../Redux/redux-store';\nimport { ChatMessageType, RootState } from '../../types/types';\nimport AddMessageForm from './AddMessageForm/AddMessageForm.tsx';\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect.tsx\";\n\nconst ChatPage: React.FC = () => {\n    const dispatch = useDispatch();\n    const status = useSelector((state: RootState) => state.chat.status)\n\n    useEffect(()=>{\n        dispatch(startMessagesListening());\n        return () => {\n            dispatch(stopMessagesListening());\n        }\n    }, [])\n    return (\n        <>\n            <h1 className={styles.caption}>WebSocket chat</h1>\n            <div className={styles.wrapper}>\n                {status === 'error' && <div>Spme error occured. Please refresh the page</div> }\n                <>\n                    <Messages />\n                    <AddMessageForm />\n                </>\n            </div>\n        </>\n    );\n};\n\nconst Messages: React.FC = () => {\n    const messages = useSelector((state: RootState) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    const [AutoScroll, setAutoScroll] = useState(false);\n\n    const onScrollHandler = (e: React.UIEvent<HTMLDivElement>) => {\n\n      const element = e.currentTarget;\n\n      let differenceWhatWeSee = element.scrollHeight - element.scrollTop\n      // element.scrollHeight - высота всей таблицы пикселей - 3800 например\n      // element.scrollTop - сколько сейчас в\n      // верхней точке длинна пикселей - 3400 например\n      // прокрутка вверх то тут уже 3300 и разница уже 500 пикселей\n\n      let value = Math.abs(differenceWhatWeSee - element.clientHeight)\n      // element.clientHeight - всегда как у див тоесть = 400\n      // 500 - 400 = 100\n\n      if (value < 200) {\n         if (!AutoScroll) {\n            setAutoScroll(true)\n            //console.log('Включили автоскролл')\n         }\n      } else {\n         if (AutoScroll) {\n            setAutoScroll(false)\n            //console.log('ВЫКЛЮЧИЛИ автоскролл')\n         }\n      }\n   }\n\n    useEffect(() => {\n        if (AutoScroll) {\n            setTimeout(() => {\n                messagesAnchorRef.current?.scrollIntoView({block: \"nearest\", behavior: 'smooth'})\n            }, 500)\n        }\n    }, [messages])\n\n    return (\n        <div className={styles.messages__wrapper} style={{overflowY: \"auto\"}} onScroll={onScrollHandler}>\n           {messages.map((m) => <Message key={m.id} message={m}/>)}\n           <div ref={messagesAnchorRef}></div>\n        </div>\n    );\n};\n\nconst Message: React.FC<{message: ChatMessageType}> = React.memo(({message}) => {\n    return (\n    <div className={styles.user}>\n        <div className={styles.userInfo}>\n            <div className={styles.userHead}>\n                <div className={styles.user__thumb}>\n                    <img src={message.photo ? message.photo : avatar} alt=\"avatar\" className={styles.avatar} />\n                </div>\n                <div className={styles.userName}>\n                    {message.userName}\n                </div>\n            </div>\n            <div className={styles.message}>\n                <ul>\n                    <li>{message.message}</li>\n                </ul>\n            </div>\n        </div>\n        <div className={styles.hline}></div>\n    </div>\n    );\n});\n\nexport default withAuthRedirect(ChatPage);"],"names":["dispatch","useDispatch","status","useSelector","state","chat","validationSchema","Yup","message","min","initialValues","onSubmit","values","resetForm","sendMessage","className","styles","as","type","name","placeholder","disabled","Messages","messages","messagesAnchorRef","useRef","useState","AutoScroll","setAutoScroll","useEffect","setTimeout","current","scrollIntoView","block","behavior","style","overflowY","onScroll","e","element","currentTarget","differenceWhatWeSee","scrollHeight","scrollTop","Math","abs","clientHeight","map","m","Message","id","ref","React","src","photo","avatar","alt","userName","withAuthRedirect","startMessagesListening","stopMessagesListening"],"sourceRoot":""}